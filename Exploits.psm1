#################################################################################
# Exploits.psm1 v.1                                                              #
#                                                                               #
#  EXPLOITS.PSm1 is intended to generate IOEs by creating deviant objects in AD  #
#                                                                               #
#                     WRITTEN BY: Darryl G. Baker, CISSP, CCSP                  #
#                                     for                                       #
#                  Tenable.ad Module to execute exploits in labs                #
#################################################################################






#Changes kerb delegation on random computer
function Delegate-Unconstrained{
    Get-ADComputer -Filter * | Get-Random -Count 1 | Set-ADAccountControl -TrustedForDelegation $true
    }

#adds SPN to random user
function Kerberoast-Prepare{
    $svc = -join((65..90) + (97..122) | Get-Random -Count 4 | %{[char]$_})
    $aduser = Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1 | select samaccountname 
    Set-ADUser -Identity $aduser -ServicePrincipalNames @{Add="$svc/tools-vm.alsid.corp:1433"} 
    Add-ADGroupMember -Identity "Domain Admins" -Members $aduser
    Write-Host "$aduser account is now vulnerable to Kerberoasting"
    }


#Give Standard user Full control of GPO
function Delegate-GPO{
    new-gpo -name TestGPO -ErrorAction SilentlyContinue
    New-GPLink -Name "TestGPO" -Target "dc=alsid,dc=corp" -ErrorAction SilentlyContinue 
    $user = Get-ADUser -Filter * | Get-Random -Count 1 | select samaccountname
    Set-GPPermission -Name TestGPO -TargetName $user.samaccountname -TargetType User -PermissionLevel GpoEditDeleteModifySecurity
    Write-Host "TestGPO delegated to $user"
    }


#Change Permissions to folder in SysVol
function Break-SysvolPermissions{
    $zpath = "C:\SYSVOL\sysvol\alsid.corp\Policies"
    $zuser =  Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1 | select samaccountname
    $Acl = Get-Acl $zpath
    $Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($zuser.samaccountname, "FullControl","Allow")
    $Acl.SetAccessRule($Ar)
    Set-Acl $zpath $Acl
    Write-Host "Bad Sysvol permissions assigned to $zuser"
    }

#Disable Kerberos Preauth
function ASREPRoast-Prepare{
        $asrepuser = Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1 | select samaccountname
        Set-ADAccountControl -Identity $asrepuser.samaccountname -DoesNotRequirePreAuth 1
        Write-Host "$asrepuser is now vulnerable to AS-REPRoasting "
        }

#Add user to Privileged group
function Elevate-User{
    $privgroups = ("Domain Admins","Enterprise Admins","Schema Admins","Administrators", "Print Operators")
    $eluser = Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1 | select samaccountname
    $elgroup = $privgroups | Get-Random -Count 1
    Add-ADGroupMember -Identity $elgroup -Members $eluser
    Write-Host "$eluser has been added to the $elgroup group"
    }

#Place password in description  field
function Password-InDescription{
    for ($i=1; $i -le (Get-Random -Maximum 6); $i=$i+1 ) {
        $randomuser = Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1 | select samaccountname
        $password = ([System.Web.Security.Membership]::GeneratePassword(12,2))
        Set-AdAccountPassword -Identity $randomuser.samaccountname -Reset -NewPassword (ConvertTo-SecureString $password -AsPlainText -Force)
        Set-ADUser $randomuser.samaccountname -Description "need to be changed $password"
        Write-Host "Password in Description : $randomuser"
    }
}
function Spray-Password{
    $same_password = ([System.Web.Security.Membership]::GeneratePassword(12,2))
    for ($i=1; $i -le (Get-Random -Maximum 200); $i=$i+1 ) {
        $randomuser = Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1 | select samaccountname
        Set-AdAccountPassword -Identity $randomuser.samaccountname -Reset -NewPassword (ConvertTo-SecureString $same_password -AsPlainText -Force)
        Set-ADUser $randomuser -Description "default password"
        Write-Info "Same Password (Password Spraying) : $randomuser"
    }
}
function DCSync-Attack{
    for ($i=1; $i -le (Get-Random -Maximum 6); $i=$i+1 ) {
        $randomuser = Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1

        $userobject = (Get-ADUser -Identity $randomuser).distinguishedname
        $ACL = Get-Acl -Path "AD:\$userobject"
        $sid = (Get-ADUser -Identity $randomuser).sid

        $objectGuidGetChanges = New-Object Guid 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2
        $ACEGetChanges = New-Object DirectoryServices.ActiveDirectoryAccessRule($sid,'ExtendedRight','Allow',$objectGuidGetChanges)
        $ACL.psbase.AddAccessRule($ACEGetChanges)

        $objectGuidGetChanges = New-Object Guid 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2
        $ACEGetChanges = New-Object DirectoryServices.ActiveDirectoryAccessRule($sid,'ExtendedRight','Allow',$objectGuidGetChanges)
        $ACL.psbase.AddAccessRule($ACEGetChanges)

        $objectGuidGetChanges = New-Object Guid 89e95b76-444d-4c62-991a-0facbeda640c
        $ACEGetChanges = New-Object DirectoryServices.ActiveDirectoryAccessRule($sid,'ExtendedRight','Allow',$objectGuidGetChanges)
        $ACL.psbase.AddAccessRule($ACEGetChanges)

        Set-ADUser $randomuser.samaccountname -Description "Replication Account"
       
        Write-Host "StillWorking on this one"
        }
    }
function Show-AttackCommands{
     Write-Host " 
 Commands
 --------
 1) Delegate-Unconstrained  : Creates ubconstrained delegation on a random computer object
 2) Delegate-GPO   : Delegates a the Test GPO object to a random user
 3) Break-SysvolPermissions   : Assign dangerous sysvol permissions to random user
 4) ASREPRoast-Prepare   :  Configures a random user account to not require Kerb Preauth
 5) Elevate-User   :   Adds a random user to a random privileged group
 6) Password-Indescription   : Resets a random users password, then adds it to the description field
 7) Spray-Password   :  Sprays a random generated passwords across 200 random user accounts
 8) DCSync-Attack   :  Gives random user DCSync permissions
 9) Show-AttackCommands   : Displays this list
 `n"
 }

[System.Windows.MessageBox]::Show("This is a work in progess so please excuse any glitches. All feedback is welcome.")
Add-Type -AssemblyName System.web

Write-Host "`
 ___________                 ___.   .__              __     .___      __    __                .___
 \__    ___/___   ____ _____ \_ |__ |  |   ____     / /   __| _/_____/  |_  \ \   _____     __| _/
   |    |_/ __ \ /    \\__  \ | __ \|  | _/ __ \   / /   / __ |/  _ \   __\  \ \  \__  \   / __ | 
   |    |\  ___/|   |  \/ __ \| \_\ \  |_\  ___/   \ \  / /_/ (  <_> )  |    / /   / __ \_/ /_/ | 
   |____| \___  >___|  (____  /___  /____/\___  >   \_\ \____ |\____/|__|   /_/   (____  /\____ | 
              \/     \/     \/    \/          \/             \/                        \/      \/ `
 `n`n Would you like to play a game...?`n
 "

 Write-Host " 
 Commands
 --------
 1) Delegate-Unconstrained  : Creates ubconstrained delegation on a random computer object
 2) Delegate-GPO   : Delegates a the Test GPO object to a random user
 3) Break-SysvolPermissions   : Assign dangerous sysvol permissions to random user
 4) ASREPRoast-Prepare   :  Configures a random user account to not require Kerb Preauth
 5) Elevate-User   :   Adds a random user to a random privileged group
 6) Password-Indescription   : Resets a random users password, then adds it to the description field
 7) Spray-Password   :  Sprays a random generated passwords across 200 random user accounts
 8) DCSync-Attack   :  Gives random user DCSync permissions
 9) Show-AttackCommands   : Displays this list
 `n"


